{"version":3,"sources":["components/util.js","store/config.js","store/dataSlice.js","components/styles/common.jsx","components/pages/Home.jsx","components/atoms/Cell.jsx","components/organisms/GridDisplay.jsx","components/organisms/LivesManager.jsx","components/atoms/GameOver.jsx","components/pages/Game.jsx","App.js","index.js"],"names":["getEmptyGrid","rows","cols","grid","i","push","j","config","dataSice","createSlice","name","initialState","level","isLevelReadyForClick","memoryGrid","userGrid","life","activeCount","isLevelComplete","isGameOver","reducers","setCellOnClick","state","payload","memoryGridValueAtClickedPosition","rowIndex","colIndex","userGridValueAtClickedPosition","onNextLevel","totalCells","maxActiveCount","Math","ceil","sqrt","position","random","floor","getMemoryGrid","setEmptyUserGrid","setLevelReadyForClick","onReset","actions","onStart","Button","styled","button","props","large","FlexColumnCenter","div","FlexRowCenter","Container","Home","dispatch","useDispatch","startClickHandler","useCallback","style","margin","onClick","CellDiv","backgroundColor","Cell","className","data-row-index","data-col-index","Grid","attrs","gridTemplateRows","gridTemplateColumns","width","height","maxHeight","maxWidth","GridDisplay","windowWidth","useSelector","windowHeight","window","innerHeight","useEffect","setTimeout","onCellClick","event","target","classList","contains","dataset","length","map","cell","undefined","React","memo","lives","livesItems","transitions","useTransition","item","key","from","transform","opacity","enter","leave","fontSize","padding","GameOverDiv","SpringGameOver","animated","useSpring","wobbly","spring","setSpring","Game","useMeasure","ref","nextClickHandler","HomeClickHandler","App","store","configureStore","reducer","dataReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0c70ff2.chunk.js","sourcesContent":["export function getMemoryGrid(rows, cols) {\r\n  const totalCells = rows * cols;\r\n  const grid = getEmptyGrid(rows, cols);\r\n  const maxActiveCount = Math.ceil(Math.sqrt(totalCells)) + 1;\r\n  let activeCount = 0;\r\n\r\n  let position = 0;\r\n  while (activeCount < maxActiveCount) {\r\n    position = (position + Math.ceil(Math.random() * totalCells)) % totalCells;\r\n    const rowIndex = Math.floor(position / cols);\r\n    const colIndex = Math.floor(position % cols);\r\n    if (grid[rowIndex][colIndex] === 0) {\r\n      grid[rowIndex][colIndex] = 1;\r\n      activeCount = activeCount + 1;\r\n    }\r\n  }\r\n  return { grid, activeCount };\r\n}\r\n\r\nexport function getEmptyGrid(rows, cols) {\r\n  const grid = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    grid.push([]);\r\n    for (let j = 0; j < cols; j++) {\r\n      grid[i].push(0);\r\n    }\r\n  }\r\n  return grid;\r\n}\r\n","export const config = {\r\n  rows: 3,\r\n  cols: 3,\r\n  life: 5,\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getMemoryGrid, getEmptyGrid } from \"../components/util\";\r\nimport { config } from \"./config\";\r\n\r\nconst dataSice = createSlice({\r\n  name: \"data\",\r\n  initialState: {\r\n    level: 0,\r\n    isLevelReadyForClick: false,\r\n    rows: config.rows,\r\n    cols: config.cols - 1,\r\n    memoryGrid: [],\r\n    userGrid: [],\r\n    life: config.life,\r\n    activeCount: 0,\r\n    isLevelComplete: true,\r\n    isGameOver: false,\r\n  },\r\n  reducers: {\r\n    setCellOnClick: (state, { payload }) => {\r\n      if (state.isGameOver) {\r\n        return;\r\n      }\r\n\r\n      const memoryGridValueAtClickedPosition = state.memoryGrid[payload.rowIndex][payload.colIndex];\r\n      const userGridValueAtClickedPosition = state.userGrid[payload.rowIndex][payload.colIndex];\r\n\r\n      if (memoryGridValueAtClickedPosition === 1 && userGridValueAtClickedPosition === 0) {\r\n        state.userGrid[payload.rowIndex][payload.colIndex] = 1;\r\n        state.activeCount = state.activeCount - 1;\r\n\r\n        if (state.activeCount === 0) {\r\n          state.isLevelComplete = true;\r\n          state.isLevelReadyForClick = false;\r\n        }\r\n      } else {\r\n        state.life = state.life - 1;\r\n      }\r\n\r\n      if (state.life === 0) {\r\n        state.isGameOver = true;\r\n      }\r\n    },\r\n    onNextLevel: (state, { payload }) => {\r\n      state.level = state.level + 1;\r\n      if (state.rows === state.cols) {\r\n        state.rows = state.rows + 1;\r\n      } else {\r\n        state.cols = state.cols + 1;\r\n      }\r\n      const { grid, activeCount } = getMemoryGrid(state.rows, state.cols);\r\n      state.memoryGrid = grid;\r\n      state.userGrid = grid;\r\n      state.activeCount = activeCount;\r\n      state.isLevelComplete = false;\r\n    },\r\n    setEmptyUserGrid: (state, { payload }) => {\r\n      state.userGrid = getEmptyGrid(state.rows, state.cols);\r\n    },\r\n    setLevelReadyForClick: (state, { payload }) => {\r\n      state.isLevelReadyForClick = payload;\r\n    },\r\n    onReset: (state) => {\r\n      state.level = 0;\r\n      state.isLevelReadyForClick = false;\r\n      state.rows = config.rows;\r\n      state.cols = config.cols - 1;\r\n      state.memoryGrid = [];\r\n      state.userGrid = [];\r\n      state.life = config.life;\r\n      state.activeCount = 0;\r\n      state.isLevelComplete = true;\r\n      state.isGameOver = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const setUserGridAsync = () => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch(setEmptyUserGrid());\r\n    dispatch(setLevelReadyForClick(true));\r\n  }, 3000);\r\n};\r\n\r\nexport const { onNextLevel, onStart, setCellOnClick, setEmptyUserGrid, setLevelReadyForClick, onReset } = dataSice.actions;\r\nexport default dataSice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  padding: 5px 25px;\r\n  background-color: black;\r\n  color: white;\r\n  border-radius: 0.5rem;\r\n  box-shadow: 0 5px 20px 0 rgba(0, 0, 0, 0.25);\r\n  cursor: pointer;\r\n  font-size: ${(props) => (props.large ? \"1.5rem\" : \"1rem\")};\r\n`;\r\n\r\nexport const FlexColumnCenter = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const FlexRowCenter = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { onNextLevel } from \"../../store/dataSlice\";\r\n\r\nimport { Button } from \"../styles/common\";\r\n\r\nconst Container = styled.div`\r\n  text-align: center;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport default function Home() {\r\n  const dispatch = useDispatch();\r\n\r\n  const startClickHandler = useCallback(\r\n    function () {\r\n      dispatch(onNextLevel());\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <header>\r\n        <h1>Memory Game</h1>\r\n      </header>\r\n      <div>\r\n        <div style={{ margin: \"50px\" }}>\r\n          <p>Remember the colored boxes displayed and click on the boxes once the game starts</p>\r\n          <p>Difficulty will increase with each level</p>\r\n        </div>\r\n        <Button large onClick={startClickHandler}>\r\n          Start\r\n        </Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nconst CellDiv = styled.div`\r\n  background-color: ${(props) => props.backgroundColor ?? \"#FFF\"};\r\n  cursor: pointer;\r\n  border-radius: 8px;\r\n`;\r\n\r\nexport default function Cell({ rowIndex, colIndex, backgroundColor }) {\r\n  return <CellDiv className=\"cell\" data-row-index={rowIndex} data-col-index={colIndex} backgroundColor={backgroundColor} />;\r\n}\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { setCellOnClick, setUserGridAsync } from \"../../store/dataSlice\";\r\nimport Cell from \"../atoms/Cell\";\r\n\r\nconst Grid = styled.div.attrs((props) => ({\r\n  style: {\r\n    gridTemplateRows: `repeat(${props.rows}, 1fr)`,\r\n    gridTemplateColumns: `repeat(${props.cols}, 1fr)`,\r\n    width: `${props.width - 20}px`,\r\n    height: `${((props.width - 20) / props.cols) * props.rows}px`,\r\n    maxHeight: `${props.rows * 100}px`,\r\n    maxWidth: `${props.cols * 100}px`,\r\n  },\r\n}))`\r\n  display: grid;\r\n  grid-gap: 4px;\r\n  background-color: #329cef;\r\n  border: 2px solid #329cef;\r\n  transition: all 0.25s; ;\r\n`;\r\n\r\nexport default function GridDisplay({ userGrid, windowWidth }) {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state);\r\n\r\n  // Fit inside the widnow height\r\n  const windowHeight = window.innerHeight - 230;\r\n  if (windowWidth > windowHeight) {\r\n    windowWidth = windowHeight;\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(setUserGridAsync());\r\n  }, [dispatch, state.level]);\r\n\r\n  const onCellClick = useCallback(\r\n    function (event) {\r\n      if (!state.isLevelReadyForClick) {\r\n        return;\r\n      }\r\n\r\n      const target = event.target;\r\n      if (target.classList.contains(\"cell\")) {\r\n        const rowIndex = target.dataset.rowIndex;\r\n        const colIndex = target.dataset.colIndex;\r\n        dispatch(setCellOnClick({ rowIndex, colIndex }));\r\n      }\r\n    },\r\n    [dispatch, state.isLevelReadyForClick]\r\n  );\r\n\r\n  return (\r\n    <Grid rows={userGrid.length} cols={userGrid[0].length} onClick={onCellClick} width={windowWidth}>\r\n      {userGrid.map((rows, rowIndex) =>\r\n        rows.map((cell, colIndex) => (\r\n          <Cell rowIndex={rowIndex} colIndex={colIndex} key={rowIndex + \"\" + colIndex} backgroundColor={cell ? \"yellow\" : undefined} />\r\n        ))\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useTransition, animated } from \"react-spring\";\r\nimport { ImMan } from \"react-icons/im\";\r\n\r\nimport { FlexRowCenter } from \"../styles/common\";\r\n\r\nexport default React.memo(function LivesManager({ lives }) {\r\n  const livesItems = [];\r\n  for (let i = 0; i < lives; i++) {\r\n    livesItems.push(<ImMan key={i} />);\r\n  }\r\n\r\n  const transitions = useTransition(livesItems, (item) => item.key, {\r\n    from: { transform: \"translateX(-1000px) translateY(-10px)\", opacity: 1 },\r\n    enter: { transform: \"translateX(0px) translateY(0px)\", opacity: 1 },\r\n    leave: { transform: \"translateX(0px) translateY(-40px)\", opacity: 0 },\r\n  });\r\n\r\n  return (\r\n    <FlexRowCenter style={{ fontSize: \"2rem\", padding: \"10px\" }}>\r\n      {transitions.map(({ item, props, key }) => (\r\n        <animated.div key={key} style={props}>\r\n          {item}\r\n        </animated.div>\r\n      ))}\r\n    </FlexRowCenter>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { useSpring, animated, config } from \"react-spring\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const GameOverDiv = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  font-size: 400%;\r\n  font-weight: bold;\r\n  color: red;\r\n`;\r\n\r\nconst SpringGameOver = animated(GameOverDiv);\r\n\r\nexport default React.memo(function GameOver({ isGameOver }) {\r\n  const [spring, setSpring] = useSpring(() => ({\r\n    transform: \"translate(-50%, -50%) rotate(-45deg) scale(0)\",\r\n    config: config.wobbly,\r\n  }));\r\n\r\n  if (isGameOver) {\r\n    setTimeout(() => setSpring({ transform: \"translate(-50%, -50%) rotate(-45deg) scale(1)\" }), 800);\r\n  }\r\n\r\n  return <SpringGameOver style={spring}>Game Over</SpringGameOver>;\r\n});\r\n","import { useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Button } from \"../styles/common\";\r\nimport { onNextLevel, onReset } from \"../../store/dataSlice\";\r\nimport { useMeasure } from \"react-use\";\r\n\r\nimport { FlexColumnCenter } from \"../styles/common\";\r\nimport GridDisplay from \"../organisms/GridDisplay\";\r\nimport LivesManager from \"../organisms/LivesManager\";\r\nimport GameOver from \"../atoms/GameOver\";\r\n\r\nexport default function Game() {\r\n  const state = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n  const [ref, { width }] = useMeasure();\r\n\r\n  const nextClickHandler = useCallback(\r\n    function () {\r\n      dispatch(onNextLevel());\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const HomeClickHandler = useCallback(\r\n    function () {\r\n      dispatch(onReset());\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <FlexColumnCenter ref={ref} style={{ position: \"relative\" }}>\r\n      <h3>Level {state.level}</h3>\r\n      <GridDisplay userGrid={state.userGrid} rows={state.rows} cols={state.cols} windowWidth={width} />\r\n      <GameOver isGameOver={state.isGameOver} />\r\n      <LivesManager lives={state.life} />\r\n      {state.isLevelComplete && <Button onClick={nextClickHandler}>Next</Button>}\r\n      {state.isGameOver && <Button onClick={HomeClickHandler}>Home</Button>}\r\n    </FlexColumnCenter>\r\n  );\r\n}\r\n","import { useSelector } from \"react-redux\";\n\nimport Home from \"./components/pages/Home\";\nimport Game from \"./components/pages/Game\";\n\nfunction App() {\n  const state = useSelector((state) => state);\n\n  if (state.level === 0) {\n    return <Home />;\n  } else {\n    return <Game />;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport \"./index.css\";\nimport dataReducer from \"./store/dataSlice\";\n\nconst store = configureStore({\n  reducer: dataReducer,\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}